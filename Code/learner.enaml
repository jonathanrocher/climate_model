from itertools import combinations
from traits.api import HasTraits, on_trait_change, List, Int
from ml_chaco import gen_scatter_plot
from ml_data import AbstractSeries
from chaco.api import Base2DPlot
from enaml.layout.layout_helpers import hbox, vbox

class ScatterTableModel(HasTraits):
	
	items = List(AbstractSeries)
	plots = List
	thumb_size = Int

	@on_trait_change('items')
	def update(self):
		plots = []
		for combination in combinations(self.items, 2):
			series_one, series_two = combination[0], combination[1]
			plot = gen_scatter_plot(series_one, series_two)
			plots.append(plot)
		self.plots = plots

	def gen_constraints(self, components):
		num_items = len(self.items)
		retval_vbox_list = []
		size_constraints = []
		count = 0
		if num_items > 1:
			n_rows = num_items - 1
			for row_idx in xrange(n_rows, 0, -1):
				row_items = []
				# it just so happens that num cols
				# in row is equal to row_idx
				n_cols = row_idx
				for col_idx in xrange(n_cols):
					plot = self.plots[count]
					row_items.append(plot)
					#size_constraints.append(plot.width == self.thumb_size)
					count += 1
				retval_vbox_list.append(hbox(*row_items))
		retval = [vbox(*retval_vbox_list)]
		return retval

enamldef ScatterTable(Container):
	attr model
	constraints << model.gen_constraints(plot_table.components)

	Include:
		id: plot_table
		components << [EnableCanvas(component=plot) for plot in model.plots]

enamldef MLView(MainWindow):
	id: ml_view
	initial_size = (800, 600)
	attr model
	ScatterTable:
		id: scatter_plots
		model << ml_view.model
	
